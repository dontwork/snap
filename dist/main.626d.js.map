{"version":3,"sources":["webpack:///./src/store.js","webpack:///./src/api.js","webpack:///./src/player.js","webpack:///./src/players.js","webpack:///./src/index.js"],"names":["store","allowGameStart","players","deck","undefined","dealCards","id","gameStarted","deck_id","mithril_default","a","request","url","then","d","piles","cards","map","c","i","player","length","push","code","Promise","all","p","pile","join","data","Object","keys","k","cardsLeft","remaining","console","log","addPlayer","turnOfPlayer","src_store","view","_ref","_ref$attrs","attrs","controls","snap","toUpperCase","addToPile","playerControls","src_players","state","disabled","onclick","oninit","redraw","mount","document","body"],"mappings":"mHA2CMA,GACJC,gBAAgB,EAChBC,gBACAC,UAAMC,EACNC,UA7CgB,WCOS,IAACC,EDN1BN,EAAMO,aAAc,GCMMD,EDLdN,EAAMG,KAAKK,QCMhBC,EAAAC,EAAEC,SACPC,2CAA4CN,EAA5C,qBDP8BO,KAAK,SAAAC,GACnC,IAAMC,KACND,EAAEE,MAAMC,IAAI,SAACC,EAAGC,GACd,IAAMC,EAASD,EAAInB,EAAME,QAAQmB,OAE7BN,EAAMM,OAASrB,EAAME,QAAQmB,SAC/BN,EAAMK,OAERL,EAAMK,GAAQE,KAAKJ,EAAEK,QAGNC,QAAQC,IAAIV,EAAME,IAAI,SAACS,EAAGP,GACzC,OCDoBhB,EDCHH,EAAMG,KAAKK,QCDFmB,EDCWR,ECDLH,EDCQU,ECArCjB,EAAAC,EAAEC,SACPC,2CAA4CT,EAA5C,SAAyDwB,EAAzD,eAA4EX,EAAMY,KAAK,OAFlE,IAACzB,EAAMwB,EAAMX,KDIzBH,KAAK,SAACgB,GACb,OCCyB1B,EDDHH,EAAMG,KAAKK,QCCFmB,EDDW,ECEvClB,EAAAC,EAAEC,SACPC,2CAA4CT,EAA5C,SAAyDwB,EAAzD,WAF0B,IAACxB,EAAMwB,IDA9Bd,KAAK,SAACa,GACPI,OAAOC,KAAKL,EAAEX,OAAOE,IAAI,SAACe,GACxBhC,EAAME,QAAQ8B,GAAGC,UAAYP,EAAEX,MAAMiB,GAAGE,YAG1CC,QAAQC,IAAIpC,EAAME,cAsBtBmC,UAjBgB,WAChBrC,EAAME,QAAQoB,UAiBdgB,aAAc,EACd/B,aAAa,GAGfgC,EAAA,EEnDAnB,GACEoB,KADa,SAAAC,GACiB,IAAAC,EAAAD,EAAvBE,MAAQC,EAAeF,EAAfE,SAAUlB,EAAKgB,EAALhB,EACvB,OAAOjB,IAAE,WACPA,IAAE,OAAQ,UACVA,IAAE,aACAA,IAAE,IAAF,SAAgBmC,EAASC,KAAKC,cAA9B,aACArC,IAAE,IAAF,SAAgBmC,EAASG,UAAUD,cAAnC,yBACArC,IAAE,KAAMiB,EAAEO,iBCLZe,IAEFH,KAAM,IACNE,UAAW,MAGXF,KAAM,IACNE,UAAW,MAGXF,KAAM,IACNE,UAAW,MAGXF,KAAM,IACNE,UAAW,MAGXF,KAAM,IACNE,UAAW,MAIfE,GACET,KADa,SAAAC,GACeA,EAArBS,MAAShD,QACd,OAAOO,IAAE,iBACPA,IAAE,YACA8B,EAAMrC,QAAQe,IAAI,SAACS,EAAGP,GACpB,OAAOV,IAAEW,GACPM,IACAkB,SAAUI,EAAe7B,SAI/BV,IAAE,kBACAA,IAAE,cACA0C,SAAUZ,EAAMhC,YAChB6C,QAFc,WAGZb,EAAMF,cAEP,oBCtCLQ,SACJQ,OADW,WHFJ5C,EAAAC,EAAEC,SACPC,IAAK,kEACJC,KAAK,SAAAV,GAAUoC,EAAMpC,KAAOA,IGEXU,KAAK,WACrB0B,EAAMtC,gBAAiB,EACvBQ,EAAAC,EAAE4C,YAGNd,KAPW,WAQT,OAAO/B,IAAE,SACPA,IAAE,SAEAA,IAAE,UACA0C,UAAWZ,EAAMtC,eACjBmD,QAASb,EAAMlC,WACd,oBAELI,IAAEwC,QAKRxC,EAAAC,EAAE6C,MAAMC,SAASC,KAAMZ","file":"main.626d.js","sourcesContent":["import { getFullDeck, addToPile, getCardsInPile } from './api'\n\nconst dealCards = () => {\n  store.gameStarted = true\n  getFullDeck(store.deck.deck_id).then(d => {\n    const piles = []\n    d.cards.map((c, i) => {\n      const player = i % store.players.length\n\n      if (piles.length < store.players.length) {\n        piles[player] = []\n      }\n      piles[player].push(c.code)\n    })\n\n    const requests = Promise.all(piles.map((p, i) => {\n      return addToPile(store.deck.deck_id, i, p)\n    }))\n\n    requests.then((data) => {\n      return getCardsInPile(store.deck.deck_id, 0)\n    }).then((p) => {\n      Object.keys(p.piles).map((k) => {\n        store.players[k].cardsLeft = p.piles[k].remaining\n      })\n\n      console.log(store.players)\n    })\n  })\n}\n\nconst addPlayer = () => {\n  store.players.push({})\n}\n\n// const nextTurn = () => {\n//   if (store.turnOfPlayer < store.players.length) {\n//     store.turnOfPlayer++\n//   } else {\n//     store.turnOfPlayer = 0\n//   }\n// }\n\nconst store = {\n  allowGameStart: false,\n  players: [{}, {}],\n  deck: undefined,\n  dealCards,\n  addPlayer,\n  turnOfPlayer: 0,\n  gameStarted: false\n}\n\nexport default store\n","import m from 'mithril'\nimport store from './store'\n\nexport const newShuffledDeck = () => {\n  return m.request({\n    url: 'https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1'\n  }).then(deck => { store.deck = deck })\n}\n\nexport const getFullDeck = (id) => {\n  return m.request({\n    url: `https://deckofcardsapi.com/api/deck/${id}/draw/?count=52`\n  })\n}\n\nexport const addToPile = (deck, pile, cards) => {\n  return m.request({\n    url: `https://deckofcardsapi.com/api/deck/${deck}/pile/${pile}/add/?cards=${cards.join(',')}`\n  })\n}\n\nexport const getCardsInPile = (deck, pile) => {\n  return m.request({\n    url: `https://deckofcardsapi.com/api/deck/${deck}/pile/${pile}/list/`\n  })\n}\n","import m from 'mithril'\n\nexport default {\n  view ({attrs: {controls, p}}) {\n    return m('.player', [\n      m('span', 'Player'),\n      m('.controls', [\n        m('p', `Press ${controls.snap.toUpperCase()} for snap`),\n        m('p', `Press ${controls.addToPile.toUpperCase()} for add pile to card`),\n        m('h3', p.cardsLeft)\n      ])\n    ])\n  }\n}\n","import m from 'mithril'\nimport store from './store'\nimport player from './player'\n\nconst playerControls = [\n  {\n    snap: 'a',\n    addToPile: 's'\n  },\n  {\n    snap: 'd',\n    addToPile: 'f'\n  },\n  {\n    snap: 'g',\n    addToPile: 'h'\n  },\n  {\n    snap: 'j',\n    addToPile: 'k'\n  },\n  {\n    snap: 'o',\n    addToPile: 'p'\n  }\n]\n\nexport default {\n  view ({state: { players }}) {\n    return m('.players-area', [\n      m('.players', [\n        store.players.map((p, i) => {\n          return m(player, {\n            p,\n            controls: playerControls[i]\n          })\n        })\n      ]),\n      m('.game-controls', [\n        m('button.add', {\n          disabled: store.gameStarted,\n          onclick () {\n            store.addPlayer()\n          }\n        }, 'Add Player')\n      ])\n    ])\n  }\n}\n","import m from 'mithril'\nimport store from './store'\nimport {newShuffledDeck} from './api'\nimport players from './players'\nimport './style.css'\n\nconst snap = {\n  oninit () {\n    newShuffledDeck().then(() => {\n      store.allowGameStart = true\n      m.redraw()\n    })\n  },\n  view () {\n    return m('.snap', [\n      m('.pile', [\n\n        m('button', {\n          disabled: !store.allowGameStart,\n          onclick: store.dealCards\n        }, 'Start the game')\n      ]),\n      m(players)\n    ])\n  }\n}\n\nm.mount(document.body, snap)\n"],"sourceRoot":""}